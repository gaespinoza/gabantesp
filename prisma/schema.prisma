// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Photo {
  id        String     @default(cuid()) @id
  title     String
  content   String?
  image     String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Account {
  id                  String @id @default(cuid())
  userId              String @map("user_id")
  type                String
  provider            String
  providerAccountId   String @map("provider_account_id")
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  oauth_token_secret  String?
  oauth_token         String?

  user                User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id              String @id @default(cuid())
  sessionToken    String @unique@map("session_token")
  userId          String @map("user_id")
  expires         DateTime
  user            User @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model User {
  id            String @id @default(cuid()) 
  name          String?
  email         String? @unique
  emailVerified DateTime?
  image         String?
  role          Role @default(VISITOR)
  photos        Photo[]
  accounts      Account[]
  sessions      Session[]
}

model verificationToken {
  id          Int @id @default(autoincrement())
  identifier  String
  token       String @unique
  expires     DateTime
  @@unique([identifier, token])
}

model Tag {
    id          String      @default(cuid()) @id
    name        String
    questions   Question[]
    @@map(name: "tags")
}

model Question {
    id          String      @default(cuid()) @id
    name        String?
    link        String?
    status      Status      @default(TODO)
    createdAt   DateTime    @default(now()) @map(name: "created_at")
    updatedAt   DateTime    @updatedAt @map(name: "updated_at")
    tags        Tag[]     
    @@map(name: "questions")
}

enum Status {
    TODO
    COMPLETED
    COOLDOWN
}

enum Role {
  VISITOR
  ADMIN
}